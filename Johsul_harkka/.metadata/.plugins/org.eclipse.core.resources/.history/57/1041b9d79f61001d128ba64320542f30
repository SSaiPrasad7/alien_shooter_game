/*
 * Pixel.c
 *
 *  Created on: -----
 *      Author: -----
 */

#include "Pixel.h"


#define CTRL_ADDRESS *(uint8_t *) 0x41220008
#define CHANNEL_ADDRESS *(uint8_t *) 0x41220000

//Table for pixel dots.
//				 dots[X][Y][COLOR]
volatile uint8_t dots[8][8][3]={0};

// Here the setup operations for the LED matrix will be performed
void setup(){
	CTRL_ADDRESS = 0;
	CHANNEL_ADDRESS = 0;

	// toggle rst bit in cntrl reg
	CTRL_ADDRESS |= (1<<0);
	sleep(500);

	CTRL_ADDRESS &= ~(1 << 0);
	sleep(500);

	CTRL_ADDRESS |= (1<<0);
	sleep(500);

	// set SDA bit
	CTRL_ADDRESS |= (1<<4);
	sleep(500);

	//Write code that sets 6-bit values in register of DM163 chip. Recommended that every bit in that register is set to 1. 6-bits and 24 "bytes", so some kind of loop structure could be nice.
	//24*6 bits needs to be transmitted
	for(int i = 0; i < 24; i++)
	{
		for(int j = 0; j < 6; j++)
		{
			CTRL_ADDRESS &= ~(1 << 3);
			CTRL_ADDRESS |= (1 << 3);
		}
	}

	//Final thing in this function is to set SB-bit to 1 to enable transmission to 8-bit register.
	CTRL_ADDRESS |= (1<<2);
}

//Change value of one pixel at led matrix. This function is only used for changing values of dots array
void SetPixel(uint8_t x,uint8_t y, uint8_t r, uint8_t g, uint8_t b){

	//Hint: you can invert Y-axis quite easily with 7-y
	dots[x][y][0]=b;
	//Write rest of two lines of code required to make this function work properly (green and red colors to array).
	dots[x][y][1]=g;
	dots[x][y][2]=r;
}


//Put new data to led matrix. Hint: This function is supposed to send 24-bytes and parameter x is for channel x-coordinate.
void run(uint8_t x){
	//Write code that writes data to led matrix driver (8-bit data). Use values from dots array
	//Hint: use nested loops (loops inside loops)
	//Hint2: loop iterations are 8,3,8 (pixels,color,8-bit data)

	CTRL_ADDRESS &= ~(1 << 1);

	for(int pixels=0; pixels < 8; pixels++){
		for(int color=0; color < 3; color++){
			uint8_t temp_data = dots[x][pixels][color];
			for(int data = 8 ; data > 0; data--){
				if( data & temp_data)
				{
					// set SDA bit
					CTRL_ADDRESS |= (1<<4);
				}
				else
				{
					CTRL_ADDRESS &= ~ (1<<4);
				}
				// set color
				CTRL_ADDRESS |= (1<<3);
				CTRL_ADDRESS &= ~ (1<<3);
			}
		}
	}

	latch();
}

//Latch signal. See colorsshield.pdf or DM163.pdf in project folder on how latching works
void latch(){
	// Set bit1 at address 0x41220008 to 1. Set bit1 at address 0x41220008 to 0.
	CTRL_ADDRESS |= (1 << 1);
	CTRL_ADDRESS &= ~(1 << 1);
}


//Set one line (channel) as active, one at a time.
void open_line(uint8_t x){
	switch(x){
	case 0:
		CHANNEL_ADDRESS = 0b00000001;
		break;
	case 1:
		CHANNEL_ADDRESS = 0b00000010;
		break;
	case 2:
		CHANNEL_ADDRESS = 0b00000100;
		break;
	case 3:
		CHANNEL_ADDRESS = 0b00001000;
		break;
	case 4:
		CHANNEL_ADDRESS = 0b00010000;
		break;
	case 5:
		CHANNEL_ADDRESS = 0b00100000;
		break;
	case 6:
		CHANNEL_ADDRESS = 0b01000000;
		break;
	case 7:
		CHANNEL_ADDRESS = 0b10000000;
		break;
	default:
		CHANNEL_ADDRESS = 0;
		break;
	}
}



